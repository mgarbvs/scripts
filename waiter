clear
file="/home/michael/.todofile"
( [ -e "$file" ] || touch "$file" ) && [ ! -w "$file" ] && echo cannot write to $file && exit 1
#█▓▒░ vars
#FULL=▓
#EMPTY=░
FULL=━
EMPTY=━
#EMPTY=─
#FULL=┅
#EMPTY=┄

now=$(date +"%r")



draw()
{
  perc=$1
  size=$2
  inc=$(( perc * size / 100 ))
  out=
  if [ -z $3 ]
  then
    color="36"
  else
    color="$3"
  fi
  for v in `seq 0 $(( size - 1 ))`; do
    test "$v" -le "$inc"   \
    && out="${out}\e[1;${color}m${FULL}" \
    || out="${out}\e[0;${color}m${EMPTY}"
  done
  printf $out
}






if [[ -z $1 || $1 == "--help" || $1 == "-h" || $1 == "--help" || $1 == "help" ]]; then

printf "  \e[0;34m%-4s \n"
#█▓▒░ ram

  echo "┌──────[ waiter ]──[ version 0.1 ]─────── ─ ─"
  printf "│  \e[0;36m%-4s \n"
  echo "│Hello, I'm Your Waiter."
  echo "│Welcome Back, $USER."
  echo "│The time is  $now"
  echo "│Your Host Is `hostname`."
  echo "│You Have `pacman -Qqs | wc -l` Packages"
  echo "├────────────────[ info ]"───────────── ─ ─

#█▓▒░ cpu
cpu=$(grep 'cpu ' /proc/stat | awk '{usage=($2+$4)*100/($2+$4+$5)} END {print usage}')
c_lvl=`printf "%.0f" $cpu`
printf "│  \e[0;36m%-4s \e[1;36m%-5s %-25s \n" " cpu" "$c_lvl%" `draw $c_lvl 15`
#█▓▒░ ram
ram=`free | awk '/Mem:/ {print int($3/$2 * 100.0)}'`
printf "│  \e[0;36m%-4s \e[1;36m%-5s %-25s \n" " ram" "$ram%" `draw $ram 15`
temp=`sensors | awk '/Core\ 0/ {gsub(/\+/,"",$3); gsub(/\..+/,"",$3)    ; print $3}'`
case 1 in
  $(($temp <= 50)))
    color='36'
    ;;
  $(($temp >= 50)))
    color='31'
    ;;
  *)
    color='36'
    ;;
esac
printf "│   \e[0;${color}m%-4s \e[1;${color}m%-5s %-25s \n" "temp" "$temp°c "`draw $temp 15 $color`
  echo "├────────────────[ options ]"───────────── ─ ─
  echo "│ -n, --news            get the news"
  echo "│ -t, --todo            todo list"
  echo "│ -a, -ta <string>    add a todo item"
  echo "│ -d, -td <number> delete a todo item"
  echo "│ -h, -h            display this screen"
  echo "└──────────────────────────────────────── ─ ─"
    echo " Goodbye!"
    printf "\n"
    i=0
       while [ $i -le 6 ]
          do
               printf "\e[$((i+41))m\e[$((i+30))m█▓▒░"
                  i=$(($i+1))
                   done
elif [[ $1 = '--news' || $1 = '-n' || $1 == "news" ]]; then
  while true;

  do
    clear
  exec snownews

  done;

elif [[ $1 = '--todo' || $1 = '-t' || $1 == "todo" ]]; then
  while true;
  do
    clear
  exec todo

  done;


elif [[ $1 = '--todo -a' || $1 = '-ta' || $1 == "todoa" ]]; then
while true;
do
 exec todo -a $2

  done;

elif [[ $1 = '--todo -s' || $1 = '-ts' || $1 == "todos" ]]; then
  while true;
  do
    clear
  exec todo -s

  done;
  elif [[ $1 = '--todo -h' || $1 = '-th' || $1 == "todos" ]]; then
  while true;
  do
    clear
  exec todo -help

  done;




elif [[ $1 = '-stocks' || $1 = '-s' || $1 == "stocks" ]]; then
  while true;
  do
    clear
  exec mop

  done;





elif [[ $1 = '-c' || $1 = '--coffee' || $1 == "stocks" ]]; then
  while true;
  do
    clear



echo""
echo""
echo" "
echo" "
echo" "
echo" "
echo"deez nut"
echo" "
echo" "
echo" "
echo" "
echo" "
echo" "
echo" "
echo" "
echo" "
echo" "


done;




elif [[ $1 = '--delete' || $1 = '-td' || $1 == "delete" ]]; then
  if [[ -z $2 ]]; then
    echo "missing option"
    echo "pass an item number to delete"
  else
    sed -e $2'd' -i $file
    todo -s
  fi
elif [[ $1 = '--add' || $1 = '-a' || $1 == "add" ]]; then
        if [[ -z $2 ]]; then
    echo "missing option"
    echo "pass an item to add"
  else
    echo $2 >> $file
  fi
else
  echo "unknown option"
  echo "call 'todo --help' for more info"
fi
exit

